doctype html
html
  head
    meta(name="viewport" content="width=device-width, initial-scale=1")
    title= title
    link(rel='stylesheet', href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css')
    link(rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css")

    link(rel="stylesheet" href="/stylesheets/nav.css")
    link(rel="stylesheet" href="/stylesheets/all.css")

  body
    script(src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js").
    script(src="https://code.jquery.com/ui/1.12.1/jquery-ui.js").


    script.
      // ====HEADER SCRIPT====

      // Gets parameter from url
      function getParameterByName(name) {
        url = window.location.href;
        name = name.replace(/[\[\]]/g, "\\$&");
        var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
            results = regex.exec(url);
        if (!results) return "";
        if (!results[2]) return "";
        return decodeURIComponent(results[2].replace(/\+/g, " "));
      }

      // HH:MM:SS dd/mm/yyyy
      function getReadableDate(date){
        var dateString = "";

        dateString += String(date.getHours()).length == 1 ? "0" + date.getHours() + ":" : date.getHours() + ":";
        dateString += String(date.getMinutes()).length == 1 ? "0" + date.getMinutes() + ":" : date.getMinutes() + ":";
        dateString += String(date.getSeconds()).length == 1 ? "0" + date.getSeconds() + " " : date.getSeconds() + " ";
        dateString += String(date.getDate()).length == 1 ? "0" + date.getDate() + "/" : date.getDate() + "/";
        dateString += String((date.getMonth()+1)).length == 1 ? "0" + (date.getMonth()+1) + "/" : (date.getMonth()+1) + "/";
        dateString += date.getFullYear();
        return dateString;
      }

      // yyyy-mm-dd HH:MM:SS
      function getFormatedDate(date) {
        var dateString = "";
        dateString += date.getFullYear() + "-";
        dateString += String((date.getMonth()+1)).length == 1 ? "0" + (date.getMonth()+1) + "-" : (date.getMonth()+1) + "-";
        dateString += String(date.getDate()).length == 1 ? "0" + date.getDate() + " " : date.getDate() + " ";
        dateString += String(date.getHours()).length == 1 ? "0" + date.getHours() + ":" : date.getHours() + ":";
        dateString += String(date.getMinutes()).length == 1 ? "0" + date.getMinutes() + ":" : date.getMinutes() + ":";
        dateString += String(date.getSeconds()).length == 1 ? "0" + date.getSeconds() : date.getSeconds();
        return dateString;
      }

      // dd-mm-yyyy
      function getDatepickerDate(date){
        var dateString = "";
        dateString += String(date.getDate()).length == 1 ? "0" + date.getDate() + "-" : date.getDate() + "-";
        dateString += String((date.getMonth()+1)).length == 1 ? "0" + (date.getMonth()+1) + "-" : (date.getMonth()+1) + "-";
        dateString += date.getFullYear();
        return dateString;
      }

      // Get X:00, X:10, X:20, X:30, X:40, X:50, X:60 ticks over an hour
      function getHourTicks(date) {
        var hTicks = [];
        var tDate = new Date(date); tDate.setMinutes(0); tDate.setSeconds(0); hTicks[0] = tDate;
        var tDate = new Date(date); tDate.setMinutes(10); tDate.setSeconds(0); hTicks[1] = tDate;
        var tDate = new Date(date); tDate.setMinutes(20); tDate.setSeconds(0); hTicks[2] = tDate;
        var tDate = new Date(date); tDate.setMinutes(30); tDate.setSeconds(0); hTicks[3] = tDate;
        var tDate = new Date(date); tDate.setMinutes(40); tDate.setSeconds(0); hTicks[4] = tDate;
        var tDate = new Date(date); tDate.setMinutes(50); tDate.setSeconds(0); hTicks[5] = tDate;
        var tDate = new Date(date); tDate.setMinutes(60); tDate.setSeconds(0); hTicks[6] = tDate;
        return hTicks;
      }

      // Get 3 hour ticks over a day
      function getDayTicks(date) {
        var hTicks = [];
        var tDate = new Date(date); tDate.setHours(0); tDate.setMinutes(0); tDate.setSeconds(0); hTicks[0] = tDate;
        var tDate = new Date(date); tDate.setHours(3); tDate.setMinutes(0); tDate.setSeconds(0); hTicks[1] = tDate;
        var tDate = new Date(date); tDate.setHours(6); tDate.setMinutes(0); tDate.setSeconds(0); hTicks[2] = tDate;
        var tDate = new Date(date); tDate.setHours(9); tDate.setMinutes(0); tDate.setSeconds(0); hTicks[3] = tDate;
        var tDate = new Date(date); tDate.setHours(12); tDate.setMinutes(0); tDate.setSeconds(0); hTicks[4] = tDate;
        var tDate = new Date(date); tDate.setHours(15); tDate.setMinutes(0); tDate.setSeconds(0); hTicks[5] = tDate;
        var tDate = new Date(date); tDate.setHours(18); tDate.setMinutes(0); tDate.setSeconds(0); hTicks[6] = tDate;
        var tDate = new Date(date); tDate.setHours(21); tDate.setMinutes(0); tDate.setSeconds(0); hTicks[7] = tDate;
        var tDate = new Date(date); tDate.setHours(24); tDate.setMinutes(0); tDate.setSeconds(0); hTicks[8] = tDate;
        return hTicks;
      }

      // 24hr to 12hr conversion
      function getTwelveHourTime(time) {
        // Check correct time format and split into components
        time = time.toString ().match (/^([01]\d|2[0-3])(:)([0-5]\d)(:[0-5]\d)?$/) || [time];

        if (time.length > 1) { // If time format correct
          time = time.slice (1);  // Remove full string match value
          time[5] = +time[0] 
          time[0] = +time[0] % 12 || 12; // Adjust hours
        }
        return time.join (''); // return adjusted time or original string
      }


    .overlay
      .overlay-inner
        .overlay-close(onclick="cancel()")
        .overlay-inner-title
        .overlay-inner-container

    .toast Test Toast

    .topnav
      .topnav-logo
      .topnav-button(id="home-button" onclick="window.location.assign('/home');") Dashboard
      .topnav-button.unavailable(id="controls-button") Control
      .topnav-button(id="settings-button" onclick="window.location.assign('/devices');") My Devices
      .topnav-seperator
      .topnav-button.unavailable(id="shop-button" onclick="/*window.location.assign('/shop');*/") Products
      .topnav-button.unavailable(id="guide-button") Guides
      .topnav-button.unavailable(id="help-button") Help

      .topnav-button(id="logout-button" style="float: right; margin-right: 20px; margin-left: 0px;" onclick="logout()") Logout
      .topnav-button.unavailable(id="account-button" style="float: right; margin-right: 20px; margin-left: 0px;")  My Account

    .page
      block content


    script.
      // Toast setup
      function toast(message, time, color) {
        $(".toast").css('display', 'block');
        $(".toast").css('background', '#00aaff');
        if(color) $(".toast").css('background', color);
        $(".toast").html(message);
        $(".toast").animate({bottom: '60px'}, { duration: 300, queue: false });
        setTimeout(function(){ $(".toast").animate({bottom: '-40px'}, { duration: 300, queue: false }); setTimeout(function(){ $(".toast").html(""); }, 300); }, time);
      }

      // Nav page setup
      var page = window.location.pathname.split('/')[1];
      if(page == 'home') {
        $("#home-button").css('border-bottom', '1px solid #777');
      } else if(page == 'controls') {
        $("#controls-button").css('border-bottom', '1px solid #777');
      } else if(page == 'devices') {
        $("#settings-button").css('border-bottom', '1px solid #777');
      } else if(page == 'shop') {
        $("#shop-button").css('border-bottom', '1px solid #777');
      }

      function logout(){
        window.location.assign('/logout');
      }


