extends ../layout

block content
  link(rel="stylesheet" href="/stylesheets/device.css")

  .device-title
    a.device-back(href="/home")
      .glyphicon.glyphicon-chevron-left
    .device-icon(style="background-image: url('/images/device/#{device.type}.png');")
    .device-name #{device.name}
    .device-type Power Monitor
    .device-settings(onclick="editDeviceDialog()")

  .graph-navigation-holder
    .graph-navigation-inner

      .graph-navigation-title Timescale
      .graph-navigation-button-holder
        .graph-navigation-button(id="hourScale" onclick="changeTimeScale('hour')" style="background: #0092DB;") Hour
        .graph-navigation-button(id="dayScale" onclick="changeTimeScale('day')" style="margin-left: 5px;") Day
        .graph-navigation-button(id="weekScale") Week
        .graph-navigation-button(id="monthScale" style="margin-left: 5px;") Month

      .graph-navigation-title Date
      .graph-navigation-left(onclick="moveDateLeft()")
        .glyphicon.glyphicon-chevron-left
      input.graph-navigation-input(id="datepicker" onchange="getData()")
      .graph-navigation-right(onclick="moveDateRight()")
        .glyphicon.glyphicon-chevron-right

      .graph-navigation-time-holder
          .graph-navigation-title Time
          .graph-navigation-left(onclick="moveTimeLeft()")
            .glyphicon.glyphicon-chevron-left
          select.graph-navigation-time(id="timepicker" onchange="getData()")
            option 1
            option 2
            option 3
            option 4
            option 5
            option 6
            option 7
            option 8
            option 9
            option 10
            option 11
            option 12
          select.graph-navigation-ampm(id="ampmpicker" onchange="getData()")
            option AM
            option PM
          .graph-navigation-right(onclick="moveTimeRight()")
            .glyphicon.glyphicon-chevron-right

    .graph-navigation-inner(style="padding-bottom: 15px;")
      .graph-navigation-title Channels

      if device.variables.split(',')[0].split(':')[2] == 1
        .graph-navigation-channel(id="c1" style="background: ##{device.variables.split(',')[0].split(':')[1]};") #{device.variables.split(',')[0].split(':')[0]}
      if device.variables.split(',')[1].split(':')[2] == 1
        .graph-navigation-channel(id="c2") #{device.variables.split(',')[1].split(':')[0]}
      if device.variables.split(',')[2].split(':')[2] == 1
        .graph-navigation-channel(id="c3") #{device.variables.split(',')[2].split(':')[0]}
      if device.variables.split(',')[3].split(':')[2] == 1
        .graph-navigation-channel(id="c4") #{device.variables.split(',')[3].split(':')[0]}
      if device.variables.split(',')[4].split(':')[2] == 1
        .graph-navigation-channel(id="c5") #{device.variables.split(',')[4].split(':')[0]}
      if device.variables.split(',')[5].split(':')[2] == 1
        .graph-navigation-channel(id="c6") #{device.variables.split(',')[5].split(':')[0]}
      if device.variables.split(',')[6].split(':')[2] == 1
        .graph-navigation-channel(id="c7") #{device.variables.split(',')[6].split(':')[0]}
      if device.variables.split(',')[7].split(':')[2] == 1
        .graph-navigation-channel(id="c8") #{device.variables.split(',')[7].split(':')[0]}


  .graph-holder
    .graph(id="chart")
    .loader
      span LOADING
    

  script(type="text/javascript").

    // =====HEADER=====

    // Setup device
    var device = JSON.parse('#{JSON.stringify(device)}'.replace(/&quot;/g, '"'));
    device.variables = device.variables.split(',');

    // Clicked variables
    var c1Clicked = true;
    var c2Clicked = false;
    var c3Clicked = false;
    var c4Clicked = false;
    var c5Clicked = false;
    var c6Clicked = false;
    var c7Clicked = false;
    var c8Clicked = false;

    // Set channels hover color
    $('#c1').hover(function(){ $(this).css('background', '#' + device.variables[0].split(':')[1]); }, function(){ if(!c1Clicked) $(this).css('background', '#777'); });
    $('#c2').hover(function(){ $(this).css('background', '#' + device.variables[1].split(':')[1]); }, function(){ if(!c2Clicked) $(this).css('background', '#777'); });
    $('#c3').hover(function(){ $(this).css('background', '#' + device.variables[2].split(':')[1]); }, function(){ if(!c3Clicked) $(this).css('background', '#777'); });
    $('#c4').hover(function(){ $(this).css('background', '#' + device.variables[3].split(':')[1]); }, function(){ if(!c4Clicked) $(this).css('background', '#777'); });
    $('#c5').hover(function(){ $(this).css('background', '#' + device.variables[4].split(':')[1]); }, function(){ if(!c5Clicked) $(this).css('background', '#777'); });
    $('#c6').hover(function(){ $(this).css('background', '#' + device.variables[5].split(':')[1]); }, function(){ if(!c6Clicked) $(this).css('background', '#777'); });
    $('#c7').hover(function(){ $(this).css('background', '#' + device.variables[6].split(':')[1]); }, function(){ if(!c7Clicked) $(this).css('background', '#777'); });
    $('#c8').hover(function(){ $(this).css('background', '#' + device.variables[7].split(':')[1]); }, function(){ if(!c8Clicked) $(this).css('background', '#777'); });

    // Set channels click color
    $('#c1').click(function(){ if(c1Clicked) { $(this).css('background', '#777'); c1Clicked = false; } else { $(this).css('background', '#' + device.variables[0].split(':')[1]); c1Clicked = true; } getData(); });
    $('#c2').click(function(){ if(c2Clicked) { $(this).css('background', '#777'); c2Clicked = false; } else { $(this).css('background', '#' + device.variables[1].split(':')[1]); c2Clicked = true; } getData(); });
    $('#c3').click(function(){ if(c3Clicked) { $(this).css('background', '#777'); c3Clicked = false; } else { $(this).css('background', '#' + device.variables[2].split(':')[1]); c3Clicked = true; } getData(); });
    $('#c4').click(function(){ if(c4Clicked) { $(this).css('background', '#777'); c4Clicked = false; } else { $(this).css('background', '#' + device.variables[3].split(':')[1]); c4Clicked = true; } getData(); });
    $('#c5').click(function(){ if(c5Clicked) { $(this).css('background', '#777'); c5Clicked = false; } else { $(this).css('background', '#' + device.variables[4].split(':')[1]); c5Clicked = true; } getData(); });
    $('#c6').click(function(){ if(c6Clicked) { $(this).css('background', '#777'); c6Clicked = false; } else { $(this).css('background', '#' + device.variables[5].split(':')[1]); c6Clicked = true; } getData(); });
    $('#c7').click(function(){ if(c7Clicked) { $(this).css('background', '#777'); c7Clicked = false; } else { $(this).css('background', '#' + device.variables[6].split(':')[1]); c7Clicked = true; } getData(); });
    $('#c8').click(function(){ if(c8Clicked) { $(this).css('background', '#777'); c8Clicked = false; } else { $(this).css('background', '#' + device.variables[7].split(':')[1]); c8Clicked = true; } getData(); });

    // Get current hour and ampm
    var hours = new Date().getHours();
    var hoursSuffix = "AM";
    if(hours == 12) { hoursSuffix = "PM"; }
    else if(hours > 12) { hours -= 12; hoursSuffix = "PM"; }
    else if(hours == 0) { hours = 12; }

    // Set time
    $("#timepicker").val(hours);
    $("#ampmpicker").val(hoursSuffix);

    // Setup date
    $("#datepicker").datepicker({dateFormat: 'dd-mm-yy'});
    $("#datepicker").val(getDatepickerDate(new Date()));

  script(type="text/javascript" src="https://www.gstatic.com/charts/loader.js").
  script(type="text/javascript" src="/javascripts/devices/Graph_Navigation.js").
  script(type="text/javascript" src="/javascripts/devices/Device_Settings.js").

  script(type="text/javascript").

    // =====GET DATA=====

    google.charts.load('current', {'packages':['corechart']});
    google.charts.setOnLoadCallback(googleLoaded);
    var chart;

    function googleLoaded(){
      chart = new google.visualization.AreaChart(document.getElementById('chart'));
      setupHourChart();
      getData();
    }

    // Gets data from server then redraws the chart
    function getData(){
      // Loader
      $('.loader').css('display', 'block');

      // Get timescale
      var timeScale = '';
      if($('#hourScale').css('background-color') == 'rgb(0, 146, 219)') timeScale = 'hour';
      else if($('#dayScale').css('background-color') == 'rgb(0, 146, 219)') timeScale = 'day';

      // Get start date and time
      var startDate = new Date();
      startDate.setFullYear($('#datepicker').val().split('-')[2]);
      startDate.setMonth($('#datepicker').val().split('-')[1]-1);
      startDate.setDate($('#datepicker').val().split('-')[0]);
      startDate.setHours($('#timepicker').val());
      if($('#ampmpicker').val() == 'PM' && $('#timepicker').val() != 12) startDate.setHours(startDate.getHours() + 12);
      else if($('#ampmpicker').val() == 'AM' && $('#timepicker').val() == 12) startDate.setHours(0);
      if(timeScale == 'day') startDate.setHours(0);
      startDate.setMinutes(0);
      startDate.setSeconds(0);

      // Get end date and time
      var endDate = new Date(startDate);
      if(timeScale == 'hour') endDate.setMinutes(endDate.getMinutes() + 60);
      if(timeScale == 'day') endDate.setHours(24);
      var timeOffset = startDate.getTimezoneOffset();

      // Set dates to GMT
      var GMTStartDate = new Date(startDate);
      var GMTEndDate = new Date(endDate);
      GMTStartDate.setMinutes(timeOffset);
      GMTEndDate.setMinutes(timeOffset);

      // Channels
      var channels = [];
      if($('#c1').length && $('#c1').css('background-color') != 'rgb(119, 119, 119)') channels.push(1);
      if($('#c2').length && $('#c2').css('background-color') != 'rgb(119, 119, 119)') channels.push(2);
      if($('#c3').length && $('#c3').css('background-color') != 'rgb(119, 119, 119)') channels.push(3);
      if($('#c4').length && $('#c4').css('background-color') != 'rgb(119, 119, 119)') channels.push(4);
      if($('#c5').length && $('#c5').css('background-color') != 'rgb(119, 119, 119)') channels.push(5);
      if($('#c6').length && $('#c6').css('background-color') != 'rgb(119, 119, 119)') channels.push(6);
      if($('#c7').length && $('#c7').css('background-color') != 'rgb(119, 119, 119)') channels.push(7);
      if($('#c8').length && $('#c8').css('background-color') != 'rgb(119, 119, 119)') channels.push(8);

      var url = "/device/getdata?devicemac=" + device.mac + "&devicetype=" + device.type + "&timescale=" + timeScale + "&timeoffset=" + timeOffset + "&startdate=" + getFormatedDate(GMTStartDate) + "&enddate=" + getFormatedDate(GMTEndDate) + "&channels=" + channels.toString();
      
      // Get new data
      var xhttp = new XMLHttpRequest();
      xhttp.onreadystatechange = function() {
        if(this.readyState == 4 && this.status == 200) {

          // Format data
          var data = JSON.parse(this.responseText);
          console.log(data);
          for(var i = 1; i < data.length; i++) {
            // Apply offset to date
            var tempDate = new Date(data[i][0]);
            tempDate.setMinutes(tempDate.getMinutes() - tempDate.getTimezoneOffset());
            data[i][0] = tempDate;
            // Convert all data to numbers
            for(var j = 1; j < data[i].length; j++) {
              data[i][j] = Number(data[i][j]);
              if(data[i][j] < 0) data[i][j] = null;
            }
          }

          var colors = [];
          if(channels.indexOf('1') != -1) colors.push('#' + device.variables[0].split(':')[1]);
          if(channels.indexOf('2') != -1) colors.push('#' + device.variables[1].split(':')[1]);
          if(channels.indexOf('3') != -1) colors.push('#' + device.variables[2].split(':')[1]);
          if(channels.indexOf('4') != -1) colors.push('#' + device.variables[3].split(':')[1]);
          if(channels.indexOf('5') != -1) colors.push('#' + device.variables[4].split(':')[1]);
          if(channels.indexOf('6') != -1) colors.push('#' + device.variables[5].split(':')[1]);
          if(channels.indexOf('7') != -1) colors.push('#' + device.variables[6].split(':')[1]);
          if(channels.indexOf('8') != -1) colors.push('#' + device.variables[7].split(':')[1]);
          options.colors = colors;
          console.log(colors);

          // Redraw Chart
          if(timeScale == 'hour') {
            chart = new google.visualization.AreaChart(document.getElementById('chart'));
            drawChart(startDate, endDate, google.visualization.arrayToDataTable(data), getHourTicks(startDate));
          } else if(timeScale == 'day') {
            chart = new google.visualization.ColumnChart(document.getElementById('chart'));
            data = google.visualization.arrayToDataTable(data);
            function selectHandler() {
                var selectedItem = chart.getSelection()[0];
                if (selectedItem) {
                  $('#dayScale').css('background-color', '#777');
                  $('#hourScale').css('background-color', '#0092DB');

                  var hours = data.getValue(selectedItem.row, 0).getHours();
                  var hoursSuffix = "AM";
                  if(hours == 12) { hoursSuffix = "PM"; }
                  else if(hours > 12) { hours -= 12; hoursSuffix = "PM"; }
                  $(".graph-navigation-time-holder").css('height', '55px');
                  $("#timepicker").val(hours);
                  $("#ampmpicker").val(hoursSuffix);

                  getData();
                }
            }
            google.visualization.events.addListener(chart, 'select', selectHandler);
            drawChart(startDate, endDate, data, getDayTicks(startDate));
          }

        }
      };
      xhttp.open("GET", url, true);
      xhttp.send();
    }

    var colors = [];
    colors.push('#' + device.variables[0].split(':')[1]);
    colors.push('#' + device.variables[1].split(':')[1]);
    colors.push('#' + device.variables[2].split(':')[1]);
    colors.push('#' + device.variables[3].split(':')[1]);
    colors.push('#' + device.variables[4].split(':')[1]);
    colors.push('#' + device.variables[5].split(':')[1]);
    colors.push('#' + device.variables[6].split(':')[1]);
    colors.push('#' + device.variables[7].split(':')[1]);

    var options = {
      legend: 'none',
      bar: {groupWidth: "80%"},
      colors: colors,
      backgroundColor: { fill:'transparent' },
      chartArea: {left: 70, right: 70, top: 20, bottom: 40},
      hAxis: {
        textStyle: { fontSize: 14 },
        gridlines: { count: 7, color:"#ccc" },
        ticks: [],
        viewWindow: {
          min: new Date(),
          max: new Date()
        }
      },
      vAxis: { 
        textStyle: { fontSize: 14 },
        gridlines: { count: 11, color:"#ccc" },
        viewWindow: {
          min: 0,
          max: 10
        },
        format: '# kWh' 
      }
    };

    function drawChart(startDate, endDate, data, ticks) {
      options.hAxis.ticks = ticks;
      options.hAxis.viewWindow.min = startDate;
      options.hAxis.viewWindow.max = endDate;
      chart.draw(data, options);
      $('.loader').css('display', 'none');
    }


