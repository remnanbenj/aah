extends device

block devicetitle
  .div(style="overflow: auto;")
    .device-icon(style="background-image: url('/images/AMP-icon.png');")
    .device-name(style="margin-left: 5px;") #{device.name}
    .device-reading 
      .div #{device.lastreadingdata.split(':')[channel-1]} A - #{(Number(device.lastreadingdata.split(':')[channel-1]) * 230).toFixed(2)} W
      .div(style="font-size: 11px;") #{device.lastreading}
      .div.kWh 

block devicecontent
  .graph-button-holder

    select.current-picker-label
      option Channel:

    select.current-picker(id="channel" onchange="changeChannel(this.value)")
      each label, index in device.labels.split(',')
        option(value="#{index+1}: #{label}") #{index+1}: #{label}

    .main-button-alt(style="margin-left: 5px;") Rename
    

block scriptdata
  script(type="text/javascript").
    if(getParameterByName('channel')) $("#channel").val(getParameterByName('channel'));

    function changeChannel(channel) {
        var url = '/device?id=' + getParameterByName('id');
        url += '&startDate=' + $('#datepicker').val().split('-')[2] + '-' + $('#datepicker').val().split('-')[1] + '-' + $('#datepicker').val().split('-')[0];
        if($('#timepicker').val()) url += '&time=' + $('#timepicker').val();
        if($('#ampmpicker').val()) url += '&ampm=' + $('#ampmpicker').val();
        if(getParameterByName('timescale')) url += '&timescale=' + getParameterByName('timescale');
        url += '&channel=' + channel;

        window.location.assign(url);
    }

    var data = JSON.parse('#{JSON.stringify(data)}'.replace(/&quot;/g, '"'));

    if('#{timescale}' == 'day') {
      var readings =  [['Time', 'Watt Hours']];
      var kWh = 0;

      for(var i = 0; i < data.length; i++) {
        var date = new Date(data[i].receivedtime);
        readings.push([date, Number(data[i].data)]);
        kWh += Number(data[i].data);
      }

      $('.kWh').html((kWh/1000).toFixed(2) + " kWh");

      var options = {
          legend: 'none',
          colors: ['#00aaff'],
          chartArea: {left: 70, top: 15, 'width': '86%', 'height': '88%'},
          hAxis: { 
            format: format,
            gridlines: { count: hAxisCount, color:"#ccc" },
            viewWindow: {
                    min: startDate,
                    max: endDate
            }
          },
          vAxis: { 
            gridlines: { count: 5, color:"#ccc" },
            viewWindow: {
                    min: 0,
                    max: 5000
            },
            format: '# Wh' 
          }
      };

      google.charts.load('current', {'packages':['corechart']});
      google.charts.setOnLoadCallback(drawChart);

      function drawChart() {
        var data = google.visualization.arrayToDataTable(readings);
        var chart = new google.visualization.ColumnChart(document.getElementById('chart'));

        function selectHandler() {
          var selectedItem = chart.getSelection()[0];
          if (selectedItem) {
            var value = data.getValue(selectedItem.row, 0);
            value = value.getHours();
            var ampm = "AM";
            if(value > 11) ampm = "PM";
            if(value > 12) value -= 12;
            if(value == 0) value = 12;

            var url = '/device?id=' + getParameterByName('id');
            url += '&timescale=hour';
            url += '&startDate=' + $('#datepicker').val().split('-')[2] + '-' + $('#datepicker').val().split('-')[1] + '-' + $('#datepicker').val().split('-')[0];
            url += '&time=' + value;
            url += '&ampm=' + ampm;
            window.location.assign(url);
          }
        }
        google.visualization.events.addListener(chart, 'select', selectHandler);

        chart.draw(data, options);
      }

    } else if(getParameterByName('timescale') == 'hour') {
      var readings =  [['Time', 'Watts']];
      var kWh = 0;

      for(var i = 0; i < data.length; i++) {
        var date = new Date(data[i].receivedtime);
        readings.push([date, Number(data[i].data)]);
        kWh = kWh + Number(data[i].data);
      }

      kWh = kWh / data.length;

      $('.kWh').html(kWh.toFixed(2) + " Wh");

      var options = {
          legend: 'none',
          colors: ['#00aaff'],
          chartArea: {left: 70, top: 15, 'width': '86%', 'height': '88%'},
          hAxis: { 
            format: format,
            gridlines: { count: hAxisCount, color:"#ccc" },
            viewWindow: {
                    min: startDate,
                    max: endDate
            }
          },
          vAxis: { 
            gridlines: { count: 5, color:"#ccc" },
            viewWindow: {
                    min: 0,
                    max: 5000
            },
            format: '# W' 
          }
      };

      google.charts.load('current', {'packages':['corechart']});
      google.charts.setOnLoadCallback(drawChart);

      function drawChart() {
        var data = google.visualization.arrayToDataTable(readings);
        var chart = new google.visualization.AreaChart(document.getElementById('chart'));
        chart.draw(data, options);
      }

    } else {
      var readings =  [['Time', 'Watt Hours']];
      var kWh = 0;

      for(var i = 0; i < data.length; i++) {
        var date = new Date(data[i].receivedtime);
        readings.push([date, Number(data[i].data)]);
        kWh += Number(data[i].data);
      }

      $('.kWh').html((kWh/1000).toFixed(2) + " kWh");

      var options = {
          legend: 'none',
          colors: ['#00aaff'],
          chartArea: {left: 70, top: 15, 'width': '86%', 'height': '88%'},
          hAxis: { 
            format: format,
            gridlines: { count: hAxisCount, color:"#ccc" },
            viewWindow: {
                    min: startDate,
                    max: endDate
            }
          },
          vAxis: { 
            gridlines: { count: 5, color:"#ccc" },
            viewWindow: {
                    min: 0,
                    max: 20000
            },
            format: '# Wh' 
          }
      };

      google.charts.load('current', {'packages':['corechart']});
      google.charts.setOnLoadCallback(drawChart);

      function drawChart() {
        var data = google.visualization.arrayToDataTable(readings);
        var chart = new google.visualization.ColumnChart(document.getElementById('chart'));
        chart.draw(data, options);
      }

    }

