extends ../layout

block content
  link(rel="stylesheet" href="/stylesheets/device.css")

  .device-container

    .device-title

      .div(style="overflow: auto; position: relative;")
        .device-icon(style="background-image: url('/images/TEMP-icon.png');")
        .device-name-container 
          .device-name #{device.name}
          .device-type Temperature Sensor
        .device-state-off
        .device-state-on
        .device-temp-settings(onclick="editTempDialog(#{device.id}, '#{device.mac}', '#{device.type}', '#{}')")
        .device-settings(onclick="editDeviceDialog(#{device.id}, '#{device.mac}', '#{device.type}', '#{device.variables}')")

    .device-content

        .graph-holder

          .graph-button-holder(style="text-align: left;")

              .main-button-alt(id="dayScale" style="margin-right: 5px; margin-left: 50px;" onclick="changeTimeScale('day')") Day

              .main-button-alt(id="hourScale" style="background: #0092DB; cursor: default; font-weight: 600; margin-right: 5px;" onclick="changeTimeScale('hour')") Hour


          .graph(id="chart")
          .loader(style="top: 230px; left: calc(50% - 15px);")

          .graph-button-holder

              .main-button-alt(style="padding-left: 8px; padding-right: 8px; padding-top: 6px;" onclick="moveLeft()")
                .glyphicon.glyphicon-triangle-left

              select.time-picker(type="text" id="timepicker" onchange="getData()" style="text-align: right;")
                  option 1
                  option 2
                  option 3
                  option 4
                  option 5
                  option 6
                  option 7
                  option 8
                  option 9
                  option 10
                  option 11
                  option 12

              select.time-picker(type="text" id="ampmpicker" onchange="getData()")
                  option AM
                  option PM

              input.date-picker(type="text" id="datepicker" onchange="getData()")

              .main-button-alt(style="padding-left: 8px; padding-right: 8px; padding-top: 6px; margin-left: 5px;" onclick="moveRight()")
                .glyphicon.glyphicon-triangle-right
    

  script(type="text/javascript" src="https://www.gstatic.com/charts/loader.js").


  script(type="text/javascript").

    // =====HEADER=====

    var device = { id:'#{device.id}', name:'#{device.name}', mac:'#{device.mac}', type:'#{device.type}', variables:'#{device.variables}'.split(',') };

    // Setup date
    $("#datepicker").datepicker({dateFormat: 'dd-mm-yy'});
    $("#datepicker").val(getFormatedDate(new Date()));

    // Setup scale
    $('#hourScale').css('background-color', '#0092DB'); $('#hourScale').css('cursor', 'default'); $('#hourScale').css('font-weight', '600'); 

    // Get current hour and ampm
    var hours = new Date().getHours();
    var hoursSuffix = "AM";
    if(hours == 12) { hoursSuffix = "PM"; }
    else if(hours > 12) { hours -= 12; hoursSuffix = "PM"; }

    // Setup time
    $("#timepicker").css('display', 'inline-block');
    $("#ampmpicker").css('display', 'inline-block');
    $("#timepicker").val(hours);
    $("#ampmpicker").val(hoursSuffix);


  script(type="text/javascript").

    // =====SETTING DIALOGS=====
  
    function editTempDialog(){
      $(".overlay-inner-title").html('Edit Device Temperatures');
      $(".overlay-inner-subtitle").html('');

      var html = "";
      html += '<span style="font-weight: 600;">Change Temperature</span>';
      html += '<br>';
      html += '<span>Max Temperature:</span>';
      html += '<br>';
      html += '<input id="deviceTempVar" value="'+device.variables[0]+'" type="number" step=".5" class="new-device-input"/>';
      html += '<br>';
      html += '<span>Range:</span>';
      html += '<br>';
      html += '<input id="deviceRangeVar" value="'+device.variables[1]+'" type="number" step=".5" class="new-device-input"/>';
      html += '<br>';
      html += '<div class="overlay-button" style="margin-right: 10px;" onclick="checkTempDialog('+device.id+')">Save</div>';
      html += '<br>';

      $('.overlay-inner-container').html('');
      $('.overlay-inner-container').append(html);

      $(".overlay").fadeIn();
    }

    function checkTempDialog(id){
      var newTemp = $("#deviceTempVar").val();
      var newRange = $("#deviceRangeVar").val();
      if(newTemp=="") { toast("Please enter a max temperature", 1200); return; }
      if(newRange=="") { toast("Please enter a temperature range", 1200); return; }

      // Check device info on server
      console.log('TODO: Check device info on server');

      // Edit on server
      var url = "/devices/changewtrtemp?id=" + id + "&newtemp=" + newTemp + "&newrange=" + newRange;
      var xhttp = new XMLHttpRequest();
      xhttp.onreadystatechange = function() {
          if (this.readyState == 4 && this.status == 200) {

            // Close dialog and edit device
            if(this.responseText == "Success") {
              toast('Device Temperatures Changed', 2400);
              $(".overlay").fadeOut();

              device.variables[0] = newTemp;
              device.variables[1] = newRange;

            } else {
              console.log(this.responseText);
            }

          }
      };
      xhttp.open("POST", url, true);
      xhttp.send();
    }

    function cancel(){
      $(".overlay").fadeOut();
    }


  script(type="text/javascript").

    // =====NAVIGATION=====

    // Changes the timescale
    function changeTimeScale(timescale) {
      // Reset buttons
      $('#hourScale').css('background-color', '#00AAFF'); $('#hourScale').css('cursor', 'pointer'); $('#hourScale').css('font-weight', '500');
      $('#dayScale').css('background-color', '#00AAFF'); $('#dayScale').css('cursor', 'pointer'); $('#dayScale').css('font-weight', '500');

      if(timescale == 'hour') { 
        $('#hourScale').css('background-color', '#0092DB'); $('#hourScale').css('cursor', 'default'); $('#hourScale').css('font-weight', '600'); 

        var hours = new Date().getHours();
        var hoursSuffix = "AM";
        if(hours == 12) { hoursSuffix = "PM"; }
        else if(hours > 12) { hours -= 12; hoursSuffix = "PM"; }

        $("#timepicker").css('display', 'inline-block');
        $("#ampmpicker").css('display', 'inline-block');
        $("#timepicker").val(hours);
        $("#ampmpicker").val(hoursSuffix);

      } else if(timescale == 'halfday') { 
        $('#halfdayScale').css('background-color', '#0092DB'); $('#dayScale').css('cursor', 'default'); $('#dayScale').css('font-weight', '600'); 

        var hours = new Date().getHours();
        var hoursSuffix = "AM";
        if(hours == 12) { hoursSuffix = "PM"; }
        else if(hours > 12) { hours -= 12; hoursSuffix = "PM"; }
        $("#timepicker").css('display', 'inline-block');
        $("#ampmpicker").css('display', 'inline-block');
        $("#timepicker").val(hours);
        $("#ampmpicker").val(hoursSuffix);

      } else if(timescale == 'day') { 
        $('#dayScale').css('background-color', '#0092DB'); $('#dayScale').css('cursor', 'default'); $('#dayScale').css('font-weight', '600'); 

        $("#timepicker").css('display', 'none');
        $("#ampmpicker").css('display', 'none');
      }

      getData();
    }

    // Move left according to timescale
    function moveLeft() {
        var date = new Date($('#datepicker').val().split('-')[2] + '-' + $('#datepicker').val().split('-')[1] + '-' + $('#datepicker').val().split('-')[0]);

        var timescale = '';
        if($('#hourScale').css('background-color') == 'rgb(0, 146, 219)') timescale = 'hour';
        else if($('#halfdayScale').css('background-color') == 'rgb(0, 146, 219)') timescale = 'halfday';
        else if($('#dayScale').css('background-color') == 'rgb(0, 146, 219)') timescale = 'day';

        if(timescale == 'hour') {

          if($('#timepicker').val() == 1) {
            $('#timepicker').val(12);

          } else if($('#timepicker').val() == 12) {
            $('#timepicker').val(11);
            if($('#ampmpicker').val() == "PM"){
              $('#ampmpicker').val('AM');
            } else {
              date.setDate(date.getDate() - 1);
              $('#datepicker').val(date.getDate() + '-' + (date.getMonth()+1) + '-' + date.getFullYear());
              $('#ampmpicker').val('PM');
            }

          } else {
            $('#timepicker').val(Number($('#timepicker').val()) - 1);
          }

        } else if(timescale == 'halfday') {

          if($('#timepicker').val() == 1) {
            $('#timepicker').val(12);

          } else if($('#timepicker').val() == 12) {
            $('#timepicker').val(11);
            if($('#ampmpicker').val() == "PM"){
              $('#ampmpicker').val('AM');
            } else {
              date.setDate(date.getDate() - 1);
              $('#datepicker').val(date.getDate() + '-' + (date.getMonth()+1) + '-' + date.getFullYear());
              $('#ampmpicker').val('PM');
            }

          } else {
            $('#timepicker').val(Number($('#timepicker').val()) - 1);
          }

        } else {
          date.setDate(date.getDate() - 1);
          var dateString = "";
          dateString += String(date.getDate()).length == 1 ? "0" + date.getDate() + "-" : date.getDate() + "-";
          dateString += String((date.getMonth()+1)).length == 1 ? "0" + (date.getMonth()+1) + "-" : (date.getMonth()+1) + "-";
          dateString += date.getFullYear();
          $('#datepicker').val(dateString);
        }

        getData();
    }

    // Move right according to timescale
    function moveRight() {
        var date = new Date($('#datepicker').val().split('-')[2] + '-' + $('#datepicker').val().split('-')[1] + '-' + $('#datepicker').val().split('-')[0]);

        var timescale = '';
        if($('#hourScale').css('background-color') == 'rgb(0, 146, 219)') timescale = 'hour';
        else if($('#halfdayScale').css('background-color') == 'rgb(0, 146, 219)') timescale = 'halfday';
        else if($('#dayScale').css('background-color') == 'rgb(0, 146, 219)') timescale = 'day';

        if(timescale == 'hour') {

          if($('#timepicker').val() == 12) {
            $('#timepicker').val(1);

          } else if($('#timepicker').val() == 11) {
            $('#timepicker').val(12);
            if($('#ampmpicker').val() == "PM"){
              date.setDate(date.getDate() + 1);
              $('#datepicker').val(date.getDate() + '-' + (date.getMonth()+1) + '-' + date.getFullYear());
              $('#ampmpicker').val('AM');
            } else {
              $('#ampmpicker').val('PM');
            }

          } else {
            $('#timepicker').val(Number($('#timepicker').val()) + 1);
          }

        } else if(timescale == 'halfday') {

          if($('#timepicker').val() == 12) {
            $('#timepicker').val(1);

          } else if($('#timepicker').val() == 11) {
            $('#timepicker').val(12);
            if($('#ampmpicker').val() == "PM"){
              date.setDate(date.getDate() + 1);
              $('#datepicker').val(date.getDate() + '-' + (date.getMonth()+1) + '-' + date.getFullYear());
              $('#ampmpicker').val('AM');
            } else {
              $('#ampmpicker').val('PM');
            }

          } else {
            $('#timepicker').val(Number($('#timepicker').val()) + 1);
          }

        } else {
          date.setDate(date.getDate() + 1);
          var dateString = "";
          dateString += String(date.getDate()).length == 1 ? "0" + date.getDate() + "-" : date.getDate() + "-";
          dateString += String((date.getMonth()+1)).length == 1 ? "0" + (date.getMonth()+1) + "-" : (date.getMonth()+1) + "-";
          dateString += date.getFullYear();
          $('#datepicker').val(dateString);
        }

        getData();
    }


  script(type="text/javascript").

    // =====STATE=====

    if(#{device.state} == 1) {
      $('.device-state-on').css('display', 'block');
    } else {
      $('.device-state-off').css('display', 'block');
    }

    function changeState(deviceID, newState) {

      // Edit on server
      var url = "/devices/changestate?id=" + deviceID + "&newstate=" + newState;
      var xhttp = new XMLHttpRequest();
      xhttp.onreadystatechange = function() {
          if (this.readyState == 4 && this.status == 200) {

            // Close dialog and edit device
            if(this.responseText == "Success") {
              toast('Device state changed', 2400);
              console.log(this.responseText);
              if(newState == 1) {
                $('.device-state-on').css('display', 'block');
                $('.device-state-off').css('display', 'none');
              } else {
                $('.device-state-off').css('display', 'block');
                $('.device-state-on').css('display', 'none');
              }

            } else {
              console.log(this.responseText);
            }

          }
      };
      xhttp.open("POST", url, true);
      xhttp.send();
    }


  script.

    // ====Util====

    function getFormatedDate(date) {
      var dateString = "";
      dateString += date.getFullYear() + "-";
      dateString += String((date.getMonth()+1)).length == 1 ? "0" + (date.getMonth()+1) + "-" : (date.getMonth()+1) + "-";
      dateString += String(date.getDate()).length == 1 ? "0" + date.getDate() + " " : date.getDate() + " ";
      dateString += String(date.getHours()).length == 1 ? "0" + date.getHours() + ":" : date.getHours() + ":";
      dateString += String(date.getMinutes()).length == 1 ? "0" + date.getMinutes() + ":" : date.getMinutes() + ":";
      dateString += String(date.getSeconds()).length == 1 ? "0" + date.getSeconds() : date.getSeconds();
      return dateString;
    }

    function getReadableDate(date) {
        var dateString = "";
        dateString += String(date.getHours()).length == 1 ? "0" + date.getHours() + ":" : date.getHours() + ":";
        dateString += String(date.getMinutes()).length == 1 ? "0" + date.getMinutes() + " " : date.getMinutes();
        return dateString;
    }


  script(type="text/javascript").

    // =====GRAPH=====

    google.charts.load('current', {'packages':['corechart']});
    google.charts.setOnLoadCallback(googleLoaded);
    var chart;

    function googleLoaded(){
      chart = new google.visualization.AreaChart(document.getElementById('chart'));
      getData();
    }

    // Gets data from server then redraws the chart
    function getData() {
      // Loader
      $('.loader').css('display', 'block');

      // Device and data info
      var deviceMac = device.mac;
      var deviceType = device.type;
      var timeScale = '';
      if($('#hourScale').css('background-color') == 'rgb(0, 146, 219)') timeScale = 'hour';
      else if($('#dayScale').css('background-color') == 'rgb(0, 146, 219)') timeScale = 'day';

      // Get dates
      var startDate = new Date($('#datepicker').val().split('-')[2] + '-' + $('#datepicker').val().split('-')[1] + '-' + $('#datepicker').val().split('-')[0]);
      startDate.setMinutes(0);
      startDate.setSeconds(0);
      console.log(getFormatedDate(startDate));
      var endDate = new Date(startDate);
      endDate.setMinutes(endDate.getMinutes() + 60);
      var timeOffset = startDate.getTimezoneOffset();

      // Set dates to GMT
      var GMTStartDate = new Date(startDate);
      var GMTEndDate = new Date(endDate);
      GMTStartDate.setMinutes(timeOffset);
      GMTEndDate.setMinutes(timeOffset);

      var url = "/device/getdata?devicemac=" + deviceMac + "&devicetype=" + deviceType + "&timescale=" + timeScale + "&timeoffset=" + timeOffset + "&startdate=" + getFormatedDate(GMTStartDate) + "&enddate=" + getFormatedDate(GMTEndDate);

      var channels = []; channels.push(1);
      url += "&channels=" + channels.toString();

      // Get new data
      var xhttp = new XMLHttpRequest();
      xhttp.onreadystatechange = function() {
        if(this.readyState == 4 && this.status == 200) {

          // Format data
          var data = JSON.parse(this.responseText)
          for(var i = 1; i < data.length; i++) {
            data[i][0] = new Date(data[i][0]);
            for(var j = 1; j < data[i].length; j++) {
              data[i][j] = Number(data[i][j]);
              if(data[i][j] < 0) data[i][j] = null;
            }
          }

          // Redraw Chart
          if(timeScale == 'hour') {
            drawHourChart(chart, startDate, endDate, data, deviceType);
          }

        }
      };
      xhttp.open("GET", url, true);
      xhttp.send();
    }

    function drawHourChart(chart, startDate, endDate, data, deviceType) {

      // Set proper data dates from server
      for(var i = 1; i < data.length; i++) {
        var tempDate = new Date(data[i][0]);
        tempDate.setMinutes(tempDate.getMinutes() - tempDate.getTimezoneOffset());
        data[i][0] = tempDate;
      }

      console.log(data);

      var options = {
          legend: 'none',
          chartArea: {left: 80, right: 80, top: 10, bottom: 50},
          explorer: {
            axis: 'horizontal',
            keepInBounds: true,
            maxZoomOut: 1.0
          },
          series: {
            0: {color: '#000', type: 'line', targetAxisIndex: 0},
            1: {color: '#f00', type: 'line', targetAxisIndex: 0},
            2: {color: '#ff0', type: 'area', targetAxisIndex: 1}
          },
          vAxes: {
            0: {title: 'Temperature (°C)', viewWindow: { min: 0, max: 80 }, ticks: [0,10,20,30,40,50,60,70,80], format: '# °C' },
            1: {title: 'Power (kW)', viewWindow: { min: 0, max: 8 }, ticks: [0,1,2,3,4,5,6,7,8], format: '# kW' }
          },
          hAxis: { 
            gridlines: { count: 7, color:"#ccc" },
            viewWindow: {
                    min: startDate,
                    max: endDate
            }
          }
      };

      var dataF = google.visualization.arrayToDataTable(data);
      chart.draw(dataF, options);
      $('.loader').css('display', 'none');
    } 

    function drawDayChart(chart, startDate, endDate, data, deviceType) {

      // Set proper dates
      for(var i = 1; i < data.length; i++) {
        var tempDate = new Date(data[i][0]);
        tempDate.setMinutes(tempDate.getMinutes() - tempDate.getTimezoneOffset());
        data[i][0] = tempDate;
      }

      console.log(data);

      // Set Options
      var options = {
          legend: 'none',
          chartArea: {left: 80, right: 80, top: 10, bottom: 50},
          explorer: {
            axis: 'horizontal',
            keepInBounds: true,
            maxZoomOut: 1.0
          },
          series: {
            0: {color: '#000', type: 'line', targetAxisIndex: 0},
            1: {color: '#f00', type: 'line', targetAxisIndex: 0},
            2: {color: '#ff0', type: 'area', targetAxisIndex: 1}
          },
          vAxes: {
            0: {title: 'Temperature (°C)', viewWindow: { min: 0, max: 80 }, ticks: [0,10,20,30,40,50,60,70,80], format: '# °C' },
            1: {title: 'Power (kW)', viewWindow: { min: 0, max: 8 }, ticks: [0,1,2,3,4,5,6,7,8], format: '# kW' }
          },
          hAxis: { 
            gridlines: { count: 7, color:"#ccc" },
            viewWindow: {
                    min: startDate,
                    max: endDate
            }
          }
      };

      var dataF = google.visualization.arrayToDataTable(data);
      chart.draw(dataF, options);
      $('.loader').css('display', 'none');
    }


