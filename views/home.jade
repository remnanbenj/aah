extends layout

block content
  link(rel="stylesheet" href="/stylesheets/home.css")
  
  .container(style="max-width: 1200px;")

    each device, index in devices
      .col-lg-4.col-md-6.col-sm-6.col-xs-12(style="padding: 10px;")

        .device-holder
          .div(id="device#{device.id}" style="overflow: hidden; margin-top: 4px; height: 220px;")
            .div(style="overflow: hidden; position: relative;")

              if device.type == 'AMP'
                .device-icon(style="background-image: url('/images/#{device.type}-icon-small.png');")
                  span.tooltip(style="top: 0px; left: 25px; width: 110px;") Power Monitor
                .device-title(id="title#{device.id}" onclick="window.location.assign('/device?id=#{device.id}');") #{device.name}

              else if device.type == 'TEMP'
                .device-icon(style="background-image: url('/images/#{device.type}-icon-small.png');")
                  span.tooltip(style="top: 0px; left: 25px; width: 120px;") Temperature Sensor
                .device-title(id="title#{device.id}" onclick="window.location.assign('/device?id=#{device.id}');") #{device.name}

              else if device.type == 'WTRLVL'
                .device-icon(style="background-image: url('/images/#{device.type}-icon-small.png');")
                  span.tooltip(style="top: 0px; left: 25px; width: 120px;") Water Level Sensor
                .device-title(id="title#{device.id}" onclick="window.location.assign('/device?id=#{device.id}');") #{device.name}

              - var timeoutMinutes = 5;
              - var currentDate = new Date();
              - currentDate.setMinutes(currentDate.getMinutes() - timeoutMinutes);
              - currentDate.setHours(currentDate.getHours() + 4);
              if device.lastreading >= currentDate
                .device-signal(style="background-image: url('/images/signal-green.png');")
                  span.tooltip(style="top: 0px; right: 25px; width: 80px;") Connected
              else
                .device-signal
                  span.tooltip(style="top: 0px; right: 25px; width: 90px;") Disconnected

              .device-settings(onclick="deviceSettings(#{device.id}, '#{device.type}')")

            .device-content(id="content#{device.id}" onclick="window.location.assign('/device?id=#{device.id}');")
              .graph(id="chart#{device.id}")


          .div(id="settings#{device.id}" style="overflow: hidden; height: 0px;")

            .div(style="overflow: hidden; position: relative;")
              .device-title Wigit Settings
              .device-close(onclick="deviceMain(#{device.id}, '#{device.type}')")
                .glyphicon.glyphicon-menu-down

            .div(style="margin-top: 5px; height: 195px; overflow: auto;")

              .col-xs-5(style="text-align: right; padding: 10px; margin-top: 10px;")
                .settings-input-label Max Value: 
                input.settings-input(type="text" value="10") 
                br
                .settings-input-label Min Value: 
                input.settings-input(type="text" value="0") 

              .col-xs-7(style="text-align: right; padding: 10px; margin-top: 10px;")
                .settings-input-label Timescale: 
                select.settings-select(type="text") 
                  option Hour
                  option Day

                if device.type == 'AMP'
                  br
                  .settings-input-label Channel: 
                  select.settings-select(type="text") 
                    option Channel 1
                    option Channel 2
                    option Channel 3
                    option Channel 4
                    option Channel 5
                    option Channel 6
                    option Channel 7
                    option Channel 8

              


  script(type="text/javascript" src="https://www.gstatic.com/charts/loader.js").
  script.

    function deviceSettings(deviceID, deviceType){
      $('#device' + deviceID).animate({height: "0px"}, 200);
      $('#settings' + deviceID).animate({height: "220px"}, 200);
    }

    function deviceMain(deviceID, deviceType){
      $('#device' + deviceID).animate({height: "220px"}, 200);
      $('#settings' + deviceID).animate({height: "0px"}, 200);
    }

    $(".device-content, .device-title").hover(function(){
      var contentID = $(this).attr('id');
      contentID = contentID.replace('content', '');
      contentID = contentID.replace('title', '');
      $("#title"+contentID).css('color', '#0af');

    }, function(){
      var contentID = $(this).attr('id');
      contentID = contentID.replace('content', '');
      contentID = contentID.replace('title', '');
      $("#title"+contentID).css('color', '#000');
    });

    function drawHourChart(device, data) {

      var data = google.visualization.arrayToDataTable(data);
      var chart;

      var startDate = new Date();
      startDate.setMinutes(0);
      startDate.setSeconds(-1);

      var endDate = new Date();
      endDate.setMinutes(60);
      endDate.setSeconds(0);

      // Set Options
      var options;
      if(device.type == "AMP") {
        var channelColor = '#000';
        options = {
          legend: 'none',
          colors: [channelColor],
          chartArea: {left: 35, top: 10, 'width': '82%', 'height': '84%'},
          hAxis: { 
            gridlines: { count: 5, color:"#ccc" },
            viewWindow: {
                    min: startDate,
                    max: endDate
            }
          },
          vAxis: { 
            gridlines: { count: 6, color:"#ccc" },
            viewWindow: {
                    min: 0,
                    max: 10
            },
            format: '#kW' 
          }
        };
        chart = new google.visualization.AreaChart(document.getElementById('chart' + device.id));

      } else if(device.type == "TEMP") {
        options = {
          legend: 'none',
          colors: ['#0af'],
          chartArea: {left: 35, top: 10, 'width': '82%', 'height': '84%'},
          hAxis: { 
            gridlines: { count: 5, color:"#ccc" },
            viewWindow: {
                    min: startDate,
                    max: endDate
            }
          },
          vAxis: { 
            gridlines: { count: 6, color:"#ccc" },
            viewWindow: {
                    min: -10,
                    max: 40
            },
            format: '#°C' 
          }
        };
        chart = new google.visualization.LineChart(document.getElementById('chart' + device.id));
      }

      chart.draw(data, options);
    }


  script.

    // ====Setup Chart Options====

    var wtrTempOptions = {
          legend: 'none',
          chartArea: {left: 80, right: 80, top: 10, bottom: 50},
          explorer: {
            axis: 'horizontal',
            keepInBounds: true,
            maxZoomOut: 1.0
          },
          series: {
            0: {color: '#000', type: 'line', targetAxisIndex: 0},
            1: {color: '#f00', type: 'line', targetAxisIndex: 0},
            2: {color: '#ff0', type: 'area', targetAxisIndex: 1}
          },
          vAxes: {
            0: {title: 'Temperature (°C)', viewWindow: { min: 0, max: 80 }, ticks: [0,20,40,60,80], format: '# °C' },
            1: {title: 'Power (kW)', viewWindow: { min: 0, max: 8 }, ticks: [0,2,4,6,8], format: '# kW' }
          },
          hAxis: { 
            gridlines: { count: 7, color:"#ccc" },
            viewWindow: {
                    min: startDate,
                    max: endDate
            }
          }
    };

    var ampOptions = {
          legend: 'none',
          colors: colors,
          chartArea: {left: 60, top: 10, 'width': '90%', 'height': '88%'},
          explorer: {
            axis: 'horizontal',
            keepInBounds: true,
            maxZoomOut: 1.0
          },
          hAxis: { 
            format: format,
            gridlines: { count: 7, color:"#ccc" },
            viewWindow: {
                    min: startDate,
                    max: endDate
            }
          },
          vAxis: { 
            gridlines: { count: 11, color:"#ccc" },
            viewWindow: {
                    min: 0,
                    max: 10
            },
            format: '# kW' 
          }
    };


  script.

    // ====Get Data====

    // Gets data based on whats selected and redraws the chart
    function getData(chart, options, deviceMac, deviceType, timeScale, startDate, endDate) {

      // Set dates to GMT
      var GMTStartDate = new Date(startDate);
      var GMTEndDate = new Date(endDate);
      GMTStartDate.setMinutes(GMTStartDate.getTimezoneOffset());
      GMTEndDate.setMinutes(GMTEndDate.getTimezoneOffset());

      // Build url to get new data from server
      var url = "/device/getdata?devicemac=" + deviceMac + "&devicetype=" + deviceType + "&timescale=" + timeScale + "&startdate=" + getFormatedDate(GMTStartDate) + "&enddate=" + getFormatedDate(GMTEndDate);

      // Get new data
      var xhttp = new XMLHttpRequest();
      xhttp.onreadystatechange = function() {
        if(this.readyState == 4 && this.status == 200) {

          // Format data
          var data = JSON.parse(this.responseText)
          for(var i = 1; i < data.length; i++) {
            data[i][0] = new Date(data[i][0]);
            for(var j = 1; j < data[i].length; j++) {
              data[i][j] = Number(data[i][j]);
              if(data[i][j] < 0) data[i][j] = null;
            }
          }

          // Redraw Chart
          if(timeScale == 'hour') {
            drawHourChart(chart, options, startDate, data);
          }

        }
      };
      xhttp.open("GET", url, true);
      xhttp.send();
    }

    function drawHourChart(chart, options, startDate, data) {
      console.log(options);
      console.log(startDate);
      console.log(data);

      /*// Get endDate one hour after startDate
      var endDate = new Date(startDate);
      endDate.setHours(endDate.getHours() + 1);
      endDate.setMinutes(0);
      endDate.setSeconds(0);

      // Set proper data dates from server
      for(var i = 1; i < data.length; i++) {
        var tempDate = new Date(data[i][0]);
        tempDate.setMinutes(tempDate.getMinutes() - tempDate.getTimezoneOffset());
        data[i][0] = tempDate;
      }

      console.log(data);

      var data = google.visualization.arrayToDataTable(data);
      chart.draw(data, options);
      $('.loader').css('display', 'none');*/
    }


  script.

    // ====Util====

    function getFormatedDate(date){
      var dateString = "";
      dateString += date.getFullYear() + "-";
      dateString += String((date.getMonth()+1)).length == 1 ? "0" + (date.getMonth()+1) + "-" : (date.getMonth()+1) + "-";
      dateString += String(date.getDate()).length == 1 ? "0" + date.getDate() + " " : date.getDate() + " ";
      dateString += String(date.getHours()).length == 1 ? "0" + date.getHours() + ":" : date.getHours() + ":";
      dateString += String(date.getMinutes()).length == 1 ? "0" + date.getMinutes() + ":" : date.getMinutes() + ":";
      dateString += String(date.getSeconds()).length == 1 ? "0" + date.getSeconds() : date.getSeconds();
      return dateString;
    }


  each device, index in devices

    script.

      // ====Get data for each device====
      var chart = new google.visualization.AreaChart(document.getElementById('chart'));

      var deviceMac = '#{device.mac}';
      var deviceType = '#{device.type}';

      var timeScale = 'hour';

      var startDate = new Date();
      startDate.setMinutes(0);
      startDate.setSeconds(0);

      var endDate = new Date(startDate);
      endDate.setMinutes(endDate.getMinutes() + 60);

      if(deviceType == "TEMP") getData(chart, wtrTempOptions, deviceMac, deviceType, timeScale, startDate, endDate);
      else if(deviceType == "AMP") getData(chart, ampOptions, deviceMac, deviceType, timeScale, startDate, endDate);
      











